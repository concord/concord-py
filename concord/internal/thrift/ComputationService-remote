#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:json,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from concord.internal.thrift import ComputationService
from concord.internal.thrift.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  ComputationTx init()')
  print('   boltProcessRecords( records)')
  print('  ComputationTx boltProcessTimer(string key, i64 time)')
  print('  ComputationMetadata boltMetadata()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ComputationService.Client(protocol)
transport.open()

if cmd == 'init':
  if len(args) != 0:
    print('init requires 0 args')
    sys.exit(1)
  pp.pprint(client.init())

elif cmd == 'boltProcessRecords':
  if len(args) != 1:
    print('boltProcessRecords requires 1 args')
    sys.exit(1)
  pp.pprint(client.boltProcessRecords(eval(args[0]),))

elif cmd == 'boltProcessTimer':
  if len(args) != 2:
    print('boltProcessTimer requires 2 args')
    sys.exit(1)
  pp.pprint(client.boltProcessTimer(args[0],eval(args[1]),))

elif cmd == 'boltMetadata':
  if len(args) != 0:
    print('boltMetadata requires 0 args')
    sys.exit(1)
  pp.pprint(client.boltMetadata())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
